{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["refreshLine","viz","document","getElementsByClassName","child","lastElementChild","classList","contains","removeChild","isSafe","grid","x","y","i","Math","abs","getRandomInt","min","max","floor","random","App","useState","graph","setGraph","query","setQuery","fetchedId","setFetchedId","existingId","setExistingId","positions","setPositions","useEffect","positionHolder","forEach","id","push","handleExisting","payload","recordedId","includes","friends","friend","handleIndex","a","console","log","alert","fetch","res","json","data","status","message","handleSubmit","trimmed","trim","length","vertex","vertexIdx","indexOf","vertexPosition","friendIdx","friendPosition","x1","y1","x2","y2","emphasized","distance","sqrt","xmid","ymid","salopeInDegree","atan2","PI","line","innerHTML","createNewLine","TextField","label","type","onChange","e","target","value","Button","variant","onClick","className","map","String","Object","assign","key","style","marginLeft","marginTop","marginBottom","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8QAsBaA,EAAc,WACvB,IAAMC,EAAMC,SAASC,uBAAuB,OAAO,GACnD,GAAGF,EAEC,IADA,IAAIG,EAAQH,EAAII,iBACTD,EAAME,UAAUC,SAAS,SAC5BN,EAAIO,YAAYJ,GAChBA,EAAQH,EAAII,kBAMXI,EAAS,SAACC,EAAMC,EAAGC,GAAO,IAAD,gBACrBF,GADqB,IAClC,IAAI,EAAJ,qBAAkB,CAAC,IAAXG,EAAU,QACd,GAAGC,KAAKC,IAAIF,EAAE,GAAKF,GAAK,GAAKG,KAAKC,IAAIF,EAAE,GAAKD,GAAK,EAC9C,OAAO,GAHmB,8BAMlC,OAAO,GAGEI,EAAe,SAACC,EAAKC,GAAN,OAAcJ,KAAKK,MAAML,KAAKM,UAAYF,EAAMD,EAAM,IAAMA,GC+EzEI,EArHH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEUF,mBAAS,IAFnB,mBAETG,EAFS,KAEFC,EAFE,OAGkBJ,mBAAS,IAH3B,mBAGTK,EAHS,KAGEC,EAHF,OAIoBN,mBAAS,IAJ7B,mBAITO,EAJS,KAIGC,EAJH,OAKkBR,mBAAS,IAL3B,mBAKTS,EALS,KAKEC,EALF,KAoBhBC,qBAAU,WACR,IAAIC,EAAiB,GACrBL,EAAWM,SAAQ,SAAAC,GACjB,IAAIzB,EAAGC,EACP,GACED,EAAIK,EAAa,EAAG,IACpBJ,EAAII,EAAa,EAAG,WACbP,EAAOyB,EAAgBvB,EAAGC,IACnCsB,EAAeG,KAAK,CAAC1B,EAAGC,OAE1BoB,EAAaE,KACZ,CAACP,EAAWE,IAEf,IAAMS,EAAiB,SAACC,GACtB,IAAIC,EAAaX,EACbW,EAAWC,SAASF,EAAQH,KAC9BI,EAAWH,KAAKE,EAAQH,IAE1BG,EAAQG,QAAQP,SAAQ,SAAAQ,GAClBH,EAAWC,SAASE,EAAOP,KAC7BI,EAAWH,KAAKM,EAAOP,OAG3BN,EAAcU,IAGVI,EAAW,uCAAG,WAAOR,GAAP,iBAAAS,EAAA,yDAClBC,QAAQC,IAAIX,IACTT,EAAUc,SAASL,GAFJ,uBAEUY,MAAM,mBAFhB,0CAGAC,MAAM,qCAAD,OAAsCb,IAH3C,cAGZc,EAHY,gBAICA,EAAIC,OAJL,OAKC,OADbC,EAJY,QAKVC,QACN7B,EAAS,GAAD,mBAAKD,GAAL,CAAY6B,EAAKb,WACzBX,EAAa,GAAD,mBAAKD,GAAL,CAAgByB,EAAKb,QAAQH,MACzCE,EAAec,EAAKb,UAGpBS,MAAMI,EAAKE,SAXK,4CAAH,sDAeXC,EAAY,uCAAG,gCAAAV,EAAA,yDACbW,EAAU/B,EAAMgC,QAClB9B,EAAUc,SAASe,GAFJ,uBAEeR,MAAM,mBAFrB,0CAGDC,MAAM,qCAAD,OAAsCO,IAH1C,cAGbN,EAHa,gBAIAA,EAAIC,OAJJ,OAKA,OADbC,EAJa,QAKXC,QACN7B,EAAS,GAAD,mBAAKD,GAAL,CAAY6B,EAAKb,WACzBX,EAAa,GAAD,mBAAKD,GAAL,CAAgByB,EAAKb,QAAQH,MACzCE,EAAec,EAAKb,UAGpBS,MAAMI,EAAKE,SAXM,4CAAH,qDAmClB,OApBArB,qBAAU,WACLJ,EAAW6B,OAAS,IACrB1D,IACAuB,EAAMY,SAAQ,SAAAwB,GACZ,IAAMC,EAAY/B,EAAWgC,QAAQF,EAAOvB,IACtC0B,EAAiB/B,EAAU6B,GACjCD,EAAOjB,QAAQP,SAAQ,SAAAQ,GACrB,IAAMoB,EAAYlC,EAAWgC,QAAQlB,EAAOP,IACtC4B,EAAiBjC,EAAUgC,GACjC,KDnFmB,SAACE,EAAIC,EAAIC,EAAIC,EAAIC,GAC1C,IAAIC,EAAWxD,KAAKyD,MAAON,EAAGE,IAAKF,EAAGE,IAAOD,EAAGE,IAAKF,EAAGE,IACpDI,GAAQP,EAAGE,GAAI,EACfM,GAAQP,EAAGE,GAAI,EAGfM,EAAmC,IADlB5D,KAAK6D,MAAMT,EAAKE,EAAIH,EAAKE,GACArD,KAAK8D,GAE7C3E,EAAMC,SAASC,uBAAuB,OAAO,GACnD,GAAGF,EAAI,CACH,IAAM4E,EAAI,0DAAqDP,EAArD,2BAAgFD,EAAa,iBAAmB,QAAhH,0BAAyII,EAAzI,4BAAiKD,EAAOF,EAAS,EAAjL,iCAA2MI,EAA3M,kBACVzE,EAAI6E,WAAaD,GCyEbE,CDzFgB,GCyFFjB,EAAe,GDxFb,GCwFgCA,EAAe,GDzF/C,GCyFkEE,EAAe,GDxFjF,GCwFoGA,EAAe,IAAmB,GAExJ,SACEhE,cAKP,CAACuB,EAAOQ,EAAWF,IAGpB,0BAAMO,GAAG,eACL,kBAAC4C,EAAA,EAAD,CAAWC,MAAM,WAAWC,KAAK,SAASC,SAAU,SAAAC,GAAC,OAAI1D,EAAS0D,EAAEC,OAAOC,QAAQA,MAAO7D,IAC1F,kBAAC8D,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASlC,GAArC,SACA,yBAAKmC,UAAU,OAEb/D,EAAU+B,OAAS,GACnB7B,EAAW8D,KAhGG,SAACvD,GAAQ,IAAD,gBACVb,GADU,IAC5B,IAAI,EAAJ,qBAAwB,CAAC,IAAjBoC,EAAgB,QACtB,GAAGiC,OAAOjC,EAAOvB,MAAQwD,OAAOxD,GAC9B,OAAOyD,OAAOC,OAAO,GAAInC,GAFL,oBAIJA,EAAOjB,SAJH,IAItB,IAAI,EAAJ,qBAAiC,CAAC,IAA1BC,EAAyB,QAC/B,GAAGiD,OAAOjD,EAAOP,MAAQwD,OAAOxD,GAC9B,OAAOyD,OAAOC,OAAO,GAAInD,IANP,gCADI,kCAgGQgD,KAAI,SAACvC,EAAMvC,GACvC,OACEkB,GAAaA,EAAUlB,GAAG,IAAMkB,EAAUlB,GAAG,IAC7C,yBAAKkF,IAAK3C,EAAKhB,GAAIqD,QAAS,kBAAM7C,EAAYQ,EAAKhB,KAAKsD,UAAW/D,EAAUc,SAASW,EAAKhB,IAAM,WAAa,MAAQA,GAAI,MAAMvB,EAAGmF,MAAO,CAAEC,WD7G9H,GC6G0IlE,EAAUlB,GAAG,GAAmBqF,UD5G1K,GC4GqLnE,EAAUlB,GAAG,GAAmBsF,aAAc,IAC9O/C,EAAKgD,YCpGFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1G,SAAS2G,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvE,QAAQuE,MAAMA,EAAM/D,c","file":"static/js/main.ec03cba8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const X_MULTIPLIER = 60\r\nexport const Y_MULTIPLIER = 20\r\n\r\nexport const Loading = () => <div style={{ marginTop: \"2rem\" }}>Loading...</div>\r\n\r\nexport const createNewLine = (x1, y1, x2, y2, emphasized) => {\r\n    let distance = Math.sqrt( (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) )\r\n    let xmid = (x1+x2)/2\r\n    let ymid = (y1+y2)/2\r\n\r\n    let salopeInRadian = Math.atan2(y1 - y2, x1 - x2)\r\n    let salopeInDegree = (salopeInRadian * 180) / Math.PI\r\n\r\n    const viz = document.getElementsByClassName('viz')[0]\r\n    if(viz){\r\n        const line = `<div class='line' style=\"z-index: -200; width: ${distance}px; background: ${emphasized ? 'var(--ternary)' : 'green'};  margin-top: ${ymid}px; margin-left: ${xmid - distance/2}px; transform: rotate(${salopeInDegree}deg); \"></div>`\r\n        viz.innerHTML += line\r\n    }\r\n}\r\n\r\nexport const refreshLine = () => {\r\n    const viz = document.getElementsByClassName('viz')[0]\r\n    if(viz){\r\n        let child = viz.lastElementChild\r\n        while (child.classList.contains('line')){\r\n            viz.removeChild(child)\r\n            child = viz.lastElementChild\r\n        } \r\n    }\r\n}\r\n\r\n\r\nexport const isSafe = (grid, x, y) => {\r\n    for(let i of grid){\r\n        if(Math.abs(i[0] - x) < 3 && Math.abs(i[1] - y) < 3){\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nexport const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Button, TextField } from '@material-ui/core';\nimport { getRandomInt, isSafe, X_MULTIPLIER, Y_MULTIPLIER, createNewLine, refreshLine } from './utils'\n\nconst App = () => {\n  const [graph, setGraph] = useState([])\n  const [query, setQuery] = useState('')\n  const [fetchedId, setFetchedId] = useState([])\n  const [existingId, setExistingId] = useState([])\n  const [positions, setPositions] = useState([])\n\n  const getDataFromId = (id) => {\n    for(let vertex of graph){\n      if(String(vertex.id) === String(id)){\n        return Object.assign({}, vertex)\n      }\n      for(let friend of vertex.friends){\n        if(String(friend.id) === String(id)){\n          return Object.assign({}, friend)\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    let positionHolder = []\n    existingId.forEach(id => {\n      let x, y\n      do {\n        x = getRandomInt(1, 20)\n        y = getRandomInt(1, 20)\n      } while(!isSafe(positionHolder, x, y))\n      positionHolder.push([x, y])\n    })\n    setPositions(positionHolder)\n  }, [fetchedId, existingId])\n\n  const handleExisting = (payload) => {\n    let recordedId = existingId\n    if(!recordedId.includes(payload.id)){\n      recordedId.push(payload.id)\n    }\n    payload.friends.forEach(friend => {\n      if(!recordedId.includes(friend.id)){\n        recordedId.push(friend.id)\n      }\n    });\n    setExistingId(recordedId)\n  }\n\n  const handleIndex = async (id) => {\n    console.log(id)\n    if(fetchedId.includes(id)){ alert(\"Fetched before!\"); return }\n    const res = await fetch(`https://avatar.labpro.dev/friends/${id}`)\n    const data = await res.json()\n    if(data.status === 200){\n      setGraph([...graph, data.payload])\n      setFetchedId([...fetchedId, data.payload.id])\n      handleExisting(data.payload)\n    }\n    else {\n      alert(data.message)\n    }\n  }\n\n  const handleSubmit = async () => {\n    const trimmed = query.trim()\n    if (fetchedId.includes(trimmed)){ alert(\"Fetched before!\"); return }\n    const res = await fetch(`https://avatar.labpro.dev/friends/${trimmed}`)\n    const data = await res.json()\n    if(data.status === 200){\n      setGraph([...graph, data.payload])\n      setFetchedId([...fetchedId, data.payload.id])\n      handleExisting(data.payload)\n    }\n    else {\n      alert(data.message)\n    }\n  }\n\n  useEffect(() => {\n    if(existingId.length > 0){\n      refreshLine()\n      graph.forEach(vertex => {\n        const vertexIdx = existingId.indexOf(vertex.id)\n        const vertexPosition = positions[vertexIdx]\n        vertex.friends.forEach(friend => {\n          const friendIdx = existingId.indexOf(friend.id)\n          const friendPosition = positions[friendIdx]\n          try {\n            createNewLine(vertexPosition[0] * X_MULTIPLIER, vertexPosition[1] * Y_MULTIPLIER, friendPosition[0] * X_MULTIPLIER, friendPosition[1] * Y_MULTIPLIER, true)\n          }\n          catch {\n            refreshLine()\n          }\n        })\n      })\n    }\n  }, [graph, positions, existingId])\n\n  return (\n    <main id='girlfriends'>\n        <TextField label=\"Query ID\" type='number' onChange={e => setQuery(e.target.value)} value={query}/>\n        <Button variant=\"contained\" onClick={handleSubmit}>Fetch</Button>\n        <div className='viz'>\n        {\n          fetchedId.length > 0 && \n          existingId.map(getDataFromId).map((data, i) => {\n            return(\n              positions && positions[i][0] && positions[i][1] && \n              <div key={data.id} onClick={() => handleIndex(data.id)} className={fetchedId.includes(data.id) ? 'dot king' : 'dot' } id={'id-'+i} style={{ marginLeft: positions[i][0] * X_MULTIPLIER, marginTop: positions[i][1] * Y_MULTIPLIER, marginBottom: 3 }}>\n                {data.name}\n              </div>\n            )\n          })\n        }\n        </div>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}